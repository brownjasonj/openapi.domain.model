openapi: 3.0.3
info:
  version: 0.0.1
  title: OpenAPI Course
  description: 'Specificaiton for OpenAPI Course'
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA
  - url: https://prod.example.com
    description: Production
paths:
  /v1/customers:
    get:
      summary: List Customers
      description: Get a list of customers
      tags:
        - Customers
      operationId: getAllCustomers
      deprecated: false
      parameters:
        - $ref: "#/components/parameters/page_number_parameter"
        - $ref: "#/components/parameters/page_size_paramater"
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer-paged-list"
    post:
      summary: New Customer
      description: Create a new customer
      tags:
        - Customers
      operationId: createCustomer
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        '201':
          description: Customer created successfully
          headers:
            location:
              description: Location of the created customer
              schema:
                type: string
                format: uri
                example: http://example.com/v1/customers/{assignedIdValue}
        '400':
          description: Bad Request
        '409':
          description: Conflict

  /v1/customers/{customer_id}:
    get:
      summary: Get a Customer by its id
      description: Get a single Customer by its Id
      tags:
        - Customers
      operationId: getCustomerById
      deprecated: false
      parameters:
        - $ref: "#/components/parameters/customer_id_path_parameter"
      responses:
        '200':
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        '404':
          description: Not found
    put:
      summary: Update Customer
      description: Update customer by id
      tags:
        - Customers
      operationId: updateCustomerById
      deprecated: false
      parameters:
        - $ref: "#/components/parameters/customer_id_path_parameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        '204':
          description: Customer updated
        '404':
          description: Not found
        '400':
          description: Bad Request
        '409':
          description: Conflict

    delete:
      summary: Delete a Customer by its id
      description: Delete a single Customer by its Id
      tags:
        - Customers
      operationId: deleteCustomerById
      deprecated: false
      parameters:
        - $ref: "#/components/parameters/customer_id_path_parameter"
      responses:
        '200':
          description: Customer deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        '404':
          description: Not found

  /v1/customers/{customer_id}/orders:
    post:
      summary: Place Order
      description: Place Order
      tags:
        - Order Service
      operationId: orderBeerByCustomerId
      deprecated: false
      parameters:
        - $ref: "#/components/parameters/customer_id_path_parameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beer_order"
      responses:
        '201':
          description: Order Created
          headers:
            Location:
              description: Reference to created Order
              schema:
                type: string
                format: uri
                example: "http://example.com/v1/orders/{orderIdValue}"
        '400':
          description: Bad request
        '409':
          description: Conflict
      callbacks:
        orderstatuschange:
          "${request.body#/orderstatuscallback}":
            description: Webhook for order status change notification
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderid:
                          type: string
                          format: uuid
                        orderstatus:
                          type: string
                          enum:
                            - Open
                            - Processing
                            - Complete
              responses:
                '200':
                  description: Okay


  /v1/beers:
    get:
      summary: List Beers
      description: Get a list of beers in stock
      deprecated: false
      tags:
        - Beers
      operationId: getAllBeers
      parameters:
        - $ref: "#/components/parameters/page_number_parameter"
        - $ref: "#/components/parameters/page_size_paramater"
      responses:
        '404':
          description: Resource not found
        '200':
          description: List of Beers available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beer-stock-paged-list"
    post:
      summary: New Beer
      description: Create a new beer
      tags:
        - Beers
      operationId: createBeer
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beer-stock-item"
      responses:
        '201':
          description: Beer stock item created successfully
          headers:
            location:
              description: Location of the created beer item
              schema:
                type: string
                format: uri
                example: http://example.com/v1/beers/{assignedIdValue}
        '400':
          description: Bad Request
        '409':
          description: Conflict


  /v1/beers/{beer_id}:
    get:
      summary: Get Beer
      description: Get a beer with the given id
      tags:
        - Beers
      operationId: getBeerById
      parameters:
        - $ref: "#/components/parameters/beer_id_path_parameter"
      responses:
        '200':
          description: Found Beer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beer-stock-item"
    put:
      summary: Update Beer
      description: Update Beer by id
      tags:
        - Beers
      operationId: updateBeerById
      deprecated: false
      parameters:
        - $ref: "#/components/parameters/beer_id_path_parameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beer-stock-item"
      responses:
        '204':
          description: Beer updated
    delete:
      summary: Delete Beer
      description: Delete a beer with the given id
      tags:
        - Beers
      operationId: deleteBeerById
      parameters:
        - $ref: "#/components/parameters/beer_id_path_parameter"
      responses:
        '200':
          description: Beer deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beer-stock-item"

  /v1/teas:
    get:
      deprecated: false
      responses:
        200:
          description: List of Teas available

components:
  parameters:
    page_number_parameter:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    page_size_paramater:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25
    customer_id_path_parameter:
      name: customer_id
      in: path
      description: Customer id
      required: true
      schema:
        type: string
        format: uuid
    beer_id_path_parameter:
      name: beer_id
      in: path
      description: Beer Id
      required: true
      schema:
        type: string
        format: uuid


  schemas:
    address:
      type: object
      properties:
        line1:
          type: string
          example: "123 Main Street"
        city:
          type: string
          example: "South Park"
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 Letter State Code
          enum:
            - AL
            - AZ
            - AK
            - AR
            - CA
        zipCode:
          type: string
          example: "91210"

    customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          example: "Kenny"
        lastName:
          type: string
          example: "Doe"
        address:
          $ref: "#/components/schemas/address"

    customer-list:
      type: array
      description: List of Customers
      items:
        $ref: "#/components/schemas/customer"

    customer-paged-list:
      type: object
      properties:
        content:
          $ref: "#/components/schemas/customer-list"
      allOf:
        - $ref: "#/components/schemas/paged_response"

    beer-stock-list:
      type: array
      items:
        $ref: '#/components/schemas/beer-stock-item'

    beer-stock-paged-list:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/beer-stock-list'
      allOf:
        - $ref: '#/components/schemas/paged_response'

    beer-stock-item:
      type: object
      properties:
        item:
          $ref: "#/components/schemas/beer-kind"
        upc:
          type: string
          format: "upc"
        price:
          description: price per case of 12 bottles
          type: number
        quantity:
          description: Number of cases in stock
          type: integer

    beer-kind:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        brewery:
          $ref: "#/components/schemas/brewery"

    brewery:
      type: object
      properties:
        name:
          type: string
          example: "Sierra Nevada"
        address:
          $ref: "#/components/schemas/address"


    beer_order:
      type: object
      required:
        - customerid
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        customerid:
          type: string
          format: uuid
        customerref:
          type: string
          nullable: true
        beerorderlines:
          type: array
          items:
            $ref: "#/components/schemas/beer_order_line"
        orderstatuscallback:
          type: string
          format: uri

    beer_order_line:
      type: object
      required:
        - upc
        - orderquantity
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        beerid:
          type: string
          format: uuid
          readOnly: true
        upc:
          type: string
        orderquantity:
          type: number
          format: int32


    paged_response:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/paged_response_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/paged_response_pageable_sort'
        first:
          type: boolean

    paged_response_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean

    paged_response_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/paged_response_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
